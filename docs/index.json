[{"content":"‚ö†Ô∏è Prerequisites These tips apply to Unreal Engine 5 and later. If you\u0026rsquo;re working with an older version, the behavior might be different. Feel free to reach out if any of my information is incorrect or misleading. I only mention tips that I believe are not well-documented online. Replicated Tags 1. AddReplicatedLooseGameplayTag (or remove) does not modify tags on the caller side For example, if you add replicated tags on the server, only the clients will receive them (through MinimalReplicationTags replication), but the tag will NOT be added on the server itself.\nIf you want to add or remove the tag on the server and also replicate it to clients, use:\nUAbilitySystemBlueprintLibrary::AddLooseGameplayTag UAbilitySystemBlueprintLibrary::RemoveLooseGameplayTag 2. Do NOT use AddLooseGameplayTag or RemoveLooseGameplayTag on replicated tags to modify them locally (unless you\u0026rsquo;re the authoritative server) Adding or removing a loose gameplay tag on the client will eventually be overridden by the replicated version from the server.\nExample: You add Tag.Example locally on the client five times. On the server, you call AddReplicatedLooseGameplayTag with Tag.Example once. The client‚Äôs tag count gets overridden when the server replicates MinimalReplicationTags. The server does not care how many times the client added the tag locally; only the replicated state matters. Replication Stage Client State Server State Before Replication 5 1 Expected After Replication 6 1 Actual After Replication 1 (Overridden) 1 Workaround: To make the server respect locally added tags, you can create a new tag: Tag.Example.Replicated.\nUse this tag for replication (AddReplicatedLooseGameplayTag, ability tags, etc.). Use Tag.Example for locally added tags. This separation prevents the server from overriding local tags. Specify Tag Prefixes for Blueprint Users In most projects, there are many tags, but certain systems only need to handle a specific group of them. For example, input tags only need to consider tags beginning with ComboGraph.Input.\nBy enforcing tag prefixes, you:\nReduce the risk of selecting the wrong tag. Keep tags organized and readable. Restricting Tags in Blueprints You can enforce tag prefixes by using arbitrary prefixes in different data structures such as FGameplayTag, TArray, and TMap. However, this restriction only works in Blueprints‚ÄîC++ does not enforce it.\nExample Usage: // Restrict TArray tags using Categories UPROPERTY(EditAnywhere, meta = (Categories = \u0026#34;General.Input\u0026#34;)) TArray\u0026lt;FGameplayTag\u0026gt; InputTags; // Restrict TMap tags using GameplayTagFilter UPROPERTY(EditAnywhere, meta = (GameplayTagFilter = \u0026#34;General.SetByCaller\u0026#34;)) TMap\u0026lt;FGameplayTag, float\u0026gt; SetByCallerMagnitudes; // Restrict function parameters (must not be a reference parameter) UFUNCTION(BlueprintCallable, Meta = (GameplayTagFilter = \u0026#34;General.Input\u0026#34;)) void ExampleFunc(FGameplayTag Input); By using these metadata settings, you can improve organization and enforce structured tag usage in your Blueprint systems.\nSerialize TMap\u0026lt;FGameplayTag, float\u0026gt; or any TMap for replication By default TMap is not supported for sending through network. In my game, I have the need to send the TMap\u0026lt;FGameplayTag, float\u0026gt; Params to the clients so I have to do my own serialization. This is the same way GAS use to replicate tag counts.\nUSTRUCT(Blueprintable) struct FReplicatedMapWrapper { GENERATED_USTRUCT_BODY() virtual bool NetSerialize(FArchive\u0026amp; Ar, class UPackageMap* Map, bool\u0026amp; bOutSuccess) override; public: UPROPERTY(BlueprintReadWrite) TMap\u0026lt;FGameplayTag, float\u0026gt; Params; }; template\u0026lt;\u0026gt; struct TStructOpsTypeTraits\u0026lt;FReplicatedMapWrapper\u0026gt; : public TStructOpsTypeTraitsBase2\u0026lt;FReplicatedMapWrapper\u0026gt; { enum { WithNetSerializer = true, }; }; bool FReplicatedMapWrapper::NetSerialize(FArchive\u0026amp; Ar, class UPackageMap* Map, bool\u0026amp; bOutSuccess) { constexpr int32 CountBits = MAX_ELEMENT_COUNT; constexpr int32 MaxCount = ((1 \u0026lt;\u0026lt; CountBits) - 1); if (Ar.IsSaving()) { int32 Count = Params.Num(); if (Count \u0026gt; MaxCount) { UE_LOG(LogTemp, Error, TEXT(\u0026#34;FReplicatedMapWrapper::NetSerialize: Too many params (%d) for replication. Clamping to %d.\u0026#34;), Count, MaxCount); Count = MaxCount; } Ar.SerializeBits(\u0026amp;Count, CountBits); for (auto\u0026amp; It : Params) { FGameplayTag Tag = It.Key; float Value = It.Value; Tag.NetSerialize(Ar, Map, bOutSuccess); Ar \u0026lt;\u0026lt; Value; if (--Count \u0026lt;= 0) { break; } } } else { int32 Count = 0; Ar.SerializeBits(\u0026amp;Count, CountBits); Params.Empty(); while (Count-- \u0026gt; 0) { FGameplayTag Tag; float Value = 0.f; Tag.NetSerialize(Ar, Map, bOutSuccess); Ar \u0026lt;\u0026lt; Value; Params.Add(Tag, Value); } } return FGameplayEffectContext::NetSerialize(Ar, Map, bOutSuccess); } I hope these insights help you avoid common pitfalls and improve your workflow! If you have any questions or additional tips, feel free to reach out. üöÄ\n","permalink":"https://teambaconn.github.io/unreal-post/gameplay-tag/","summary":"Gotcha tips you might not know when using Gameplay Tags with GAS","title":"[Unreal] Using Gameplay Tags with GAS"},{"content":"About Me My name is Nguyen Lam Tuong (Bacon) I am based in Ho Chi Minh City, Vietnam I have a bachelor\u0026rsquo;s degree in Computer Science from HCM University of Science Check out my üü¶ LinkedIn for the latest updates on my professional profile. Technical Skills Game AI, Gameplay Programming, Tool / Editor Programming Multiplayer Programming Unreal Engine, Unity C++, C#, Lua, Java, Javascript 3D Math, Linear Algebra Web \u0026amp; App Fullstack Development Shipped Games Sipher Odyssey - Cross Platform\rFramework: Unreal Engine\nResponsibility: Game Engineer\nWebsite: Sipher Odyssey\nDemon Hunter - Mobile\rFramework: BlockmanGO Engine\nResponsibility: Product Owner, Full-stack Developer\nPersonal / Gamejam Projects Most of my games are available on Itch.io\nYou can explore more games from my old portfolio\nCombat system - UE5 / PC\rFramework: Unreal Engine\nResponsibility: Solo Developer\nMagic Typer - Web / Mobile\rFramework: Unity\nResponsibility: Solo Developer\nFarm Fortune - Web\rFramework: Unity\nResponsibility: Solo Developer\nHellevator - Web / Mobile\rFramework: Unity\nResponsibility: Solo Developer\nChess Factorio - Web\rFramework: Unity\nResponsibility: Solo Developer\nNon-game projects Stylix - Mobile App\rStylix is a mobile app that allows users to virtually try on any clothes before purchase. We accurately analyze the body of users, allowing them to try on any clothes at any time and anywhere. By using state-of-the-art models, our technology can map 2D images of clothes onto the user\u0026rsquo;s body despite their unique shape in no time and at low cost.\nChannel: Youtube Project detail: Milanote FindMe - Web App\rFindMe provides a service that allows filtering of running athletes\u0026rsquo; images based on the athlete\u0026rsquo;s bib number (BIB) and face recognition. Runners can access the product\u0026rsquo;s website after the event finishes, upload their face image, or enter their BIB number to retrieve all of the photos containing their faces or bib in the race.\nProject detail: Milanote ","permalink":"https://teambaconn.github.io/posts/portfolio/","summary":"Showcasing games \u0026amp; apps that I have worked on","title":"Portfolio"}]